library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;


entity full_adder_4bit is port (
   BUS0_b0, BUS1_b0, BUS0_b1, BUS1_b1, BUS0_b2, BUS1_b2, BUS0_b3, BUS1_b3, Carry_In : in std_logic;
	Carry_Out3 	: out std_logic; 
	SUM 			: out std_logic_vector (3 downto 0)
	
); 
end full_adder_4bit;

architecture SimpleCircuit of LogicalStep_Lab2_top is
--
-- Components Used ---
------------------------------------------------------------------- 
   component FullAdder1Bit port (
		INPUT_B, INPUT_A, CARRY_IN 							: in std_logic;
		FULL_ADDER_CARRY_OUTPUT, FULL_ADDER_SUM_OUTPUT	: out std_logic
   ); 
   end component;
	
-- Create any signals, or temporary variables to be used
--
--  std_logic_vector is a signal which can be used for logic operations such as OR, AND, NOT, XOR
--
	signal Carry_Out0 : std_logic;
	signal Carry_Out1 : std_logic;
	signal Carry_Out2 : std_logic;
	signal SUM0 		: std_logic;
	signal SUM1 		: std_logic;
	signal SUM2 		: std_logic;
	signal SUM3 		: std_logic;
	
-- Here the circuit begins

begin
	-- COMPONENT HOOKUP 
	--
	-- Generate the seven segment coding
	
	INST1: FullAdder1Bit port map(BUS0_b0, BUS1_b0, Carry_In, Carry_Out0, SUM0);
	INST2: FullAdder1Bit port map(BUS0_b1, BUS1_b1, Carry_Out0, Carry_Out1, SUM1);
	INST3: FullAdder1Bit port map(BUS0_b2, BUS1_b2, Carry_Out1, Carry_Out2, SUM2);
	INST4: FullAdder1Bit port map(BUS0_b3, BUS1_b3, Carry_Out2, Carry_Out3, SUM3);

	SUM <= SUM3 & SUM2 & SUM1 & SUM0;
 
end SimpleCircuit;

